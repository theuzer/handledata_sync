module.exports = {
  queries: {
    getMatchesQuery: 'select top(2000) g.id, g.stats, g.gameId from game g where g.hasLeavers = 0 and g.hasError = 0 and g.isProcessed = 0',
    checkIfGameExists: gameId => `select top(1) id from match where matchid = '${gameId}'`,
    updateGameIsProcessed: id => `update game set isProcessed = 1 where id = ${id}`,
    updateGameHasLeavers: id => `update game set HasLeavers = 1 where id = ${id}`,
    updateGameHasError: id => `update game set HasError = 1 where id = ${id}`,
    beginTransaction: "BEGIN TRANSACTION \n declare @matchId int;declare @team1Id int;declare @team2Id int;",
    commitTransaction: "\n COMMIT TRANSACTION",
    insertCharacter: (teamNo, playerCode, teamCode, championCode, attach, mount, outfit, emote, br1, br2, br3, br4, br5, champLevel, champTime, totalTime, division, divisionRating, league, abilityUses, damageDone, damageReceived, deaths, disablesDone, disablesReceived, energyGained, energyUsed, healingDone, healingReceived, kills, score, timeAlive) => `EXECUTE InsertCharacter @gameTeamId = @team${teamNo}Id, @playerCode = ${playerCode}, @teamCode = ${teamCode}, @championCode = ${championCode}, @attachmentCode = ${attach}, @emoteCode = ${emote}, @mountCode = ${mount}, @outfitCode = ${outfit}, @br1 = ${br1}, @br2 = ${br2}, @br3 = ${br3}, @br4 = ${br4}, @br5 = ${br5}, @championLevel = ${champLevel}, @championTimePlayed = ${champTime}, @totalTimePlayed = ${totalTime}, @division = ${division}, @divisionRating = ${divisionRating}, @league = ${league}, @abilityUses = ${abilityUses}, @damageDone = ${damageDone}, @damageReceived = ${damageReceived}, @deaths = ${deaths}, @disablesDone = ${disablesDone}, @disablesReceived = ${disablesReceived}, @energyGained = ${energyGained}, @energyUsed = ${energyUsed}, @healingDone = ${healingDone}, @healingReceived = ${healingReceived}, @kills = ${kills}, @score = ${score}, @timeAlive = ${timeAlive};`,
    insertMatch: (matchId, map, region, gameType, patch, isRanked, teamSize, date, numberOfRounds) => `EXEC @matchId = InsertMatch '${matchId}', '${map}', '${region}', '${gameType}', '${patch}', ${isRanked}, ${teamSize}, '${date}', ${numberOfRounds};`,
    insertTeam: (teamNo, teamNumber, isWin) => `EXECUTE @team${teamNo}Id = InsertTeam @matchId, ${teamNumber}, ${isWin};`,
    insertPlayerLastMatch: (playerCode, teamCode, lastMatchDate, teamSize, league, division, divisionRating, wins, losses, isRanked, season, placementGamesLeft) => `EXECUTE InsertPlayerLastMatch ${playerCode}, ${teamCode}, '${lastMatchDate}', ${teamSize}, ${league}, ${division}, ${divisionRating}, ${wins}, ${losses}, ${isRanked}, ${season}, ${placementGamesLeft};`,
  },
  transactionErrors: {
    request: 'EREQUEST',
    timeout: 'ETIMEOUT',
  },
  errors: {
    dataOnConnection: 1,
    logOnConnection: 2,
    dataConnection: 3,
    logConnection: 4,
    getTelemetry: 5,
    checkIfGameExist: 6,
    retrieveGames: 7,
    updateGameHasError: 8,
    updateGameIsProcessed: 9,
    updateGameHasLeavers: 10,
    insertMatchTimeout: 11,
  },
  telemetry: {
    matchStart: 'Structures.MatchStart',
    user: 'Structures.MatchReservedUser',
    matchFinish: 'Structures.MatchFinishedEvent',
    pickBattlerite: 'Structures.BattleritePickEvent',
    roundFinish: 'Structures.RoundFinishedEvent',
    teamUpdate: 'com.stunlock.battlerite.team.TeamUpdateEvent',
    ranked: 'RANKED',
  },
  toDelete: {
    getGames: "select top(100) id, stats from game where isprocessed = 1 and haserror = 0 and hasleavers = 0 and isprocessed2 = 0 and logdate < '2018-3-9 10:00:00'",
    updateGameIsProcessed2: id => `update game set isProcessed2 = 1 where id = ${id}`,
  },
};
